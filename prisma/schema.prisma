// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Primary Content Models
model Source {
  name         String
  description  String?        @db.Text
  url          String         @id
  icon         String?
  banner       String?
  classes      String?
  ModSource    ModSource[]
  ModInstaller ModInstaller[]
}

model Category {
  id          Int        @id @default(autoincrement())
  parentId    Int?       @default(0) @map("parentId")
  children    Category[] @relation("children")
  parent      Category?  @relation("children", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  name        String
  nameShort   String
  description String?    @db.Text
  url         String?
  classes     String?
  banner      String?
  icon        String?
  Mod         Mod[]
  hasBg       Boolean    @default(false)
}

model Mod {
  id      Int     @id @default(autoincrement())
  url     String  @unique
  visible Boolean @default(true)

  // Ownership
  owner     User?   @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  ownerId   String?
  ownerName String?

  // General details.
  name             String
  banner           String?
  description      String  @db.Text
  descriptionShort String?
  install          String? @db.Text

  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  editAt      DateTime  @default(now())
  lastScanned DateTime?

  // For caching and whatnot.
  totalDownloads BigInt @default(0)
  totalViews     BigInt @default(0)

  // Relations
  category   Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId Int?

  ModSource      ModSource[]
  ModDownload    ModDownload[]
  ModScreenshot  ModScreenshot[]
  ModRating      ModRating[]
  ModUniqueView  ModUniqueView[]
  ModCollections ModCollections[]
  ModComment     ModComment[]
  ModInstaller   ModInstaller[]
  ModTag         ModTag[]
  ModCredit      ModCredit[]
}

// Mod Relations
model ModDownload {
  mod   Mod     @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId Int
  name  String?
  url   String

  @@id([modId, url])
}

model ModScreenshot {
  mod   Mod    @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId Int
  url   String

  @@id([modId, url])
}

model ModSource {
  mod       Mod     @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId     Int
  source    Source  @relation(fields: [sourceUrl], references: [url], onUpdate: Cascade, onDelete: Cascade)
  sourceUrl String
  primary   Boolean @default(false)
  query     String

  @@id([modId, sourceUrl])
}

model ModInstaller {
  mod       Mod    @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId     Int
  source    Source @relation(fields: [sourceUrl], references: [url], onUpdate: Cascade, onDelete: Cascade)
  sourceUrl String
  url       String

  @@id([modId, sourceUrl])
}

model ModUniqueView {
  mod       Mod      @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId     Int
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([modId, userId])
}

model ModRating {
  mod       Mod      @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId     Int
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  positive Boolean @default(true)

  @@id([modId, userId])
}

model ModComment {
  id        Int       @id @default(autoincrement())
  mod       Mod       @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId     Int
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updateAt  DateTime? @updatedAt

  contents String
}

model ModTag {
  mod   Mod    @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId Int
  tag   Tag    @relation(fields: [tagId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  tagId String

  @@id([modId, tagId])
}

model ModCredit {
  id     Int     @id @default(autoincrement())
  mod    Mod     @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId  Int
  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String?

  name   String
  credit String
}

// Collections
model ModCollection {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         String           @unique
  ModCollections ModCollections[]

  @@unique([id, userId])
}

model ModCollections {
  col   ModCollection @relation(fields: [colId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  colId Int
  mod   Mod           @relation(fields: [modId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modId Int

  @@id([colId, modId])
}

// User Accounts & Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Permissions   Permissions[]
  ModRating     ModRating[]
  ModUniqueView ModUniqueView[]
  ModCollection ModCollection?
  ModComment    ModComment[]
  Mod           Mod[]
  ModCredit     ModCredit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Permissions
model Permissions {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  perm   String

  @@unique([perm, userId])
}

// Tag System
model Tag {
  name        String   @id
  description String?  @db.Text
  ModTag      ModTag[]
}

// API keys
model ApiKey {
  id Int @id @default(autoincrement())

  ipAddr   String?
  agent    String?
  endPoint String?
  method   String?

  key       String @unique
  rateLimit Int?   @default(100)

  log ApiLog[]
}

model ApiLog {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  ipAddr   String?
  agent    String?
  endPoint String?
  method   String?
  data     String?

  apiKeyId Int
  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
